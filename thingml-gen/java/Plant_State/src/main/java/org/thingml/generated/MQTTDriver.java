/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : MQTTDriver
 **/
public class MQTTDriver extends Component implements IMQTTDriver_from_pim, IMQTTDriver_MQTT {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void messages_via_from_pim(int GeneralMsg_messages_section_id_var, String GeneralMsg_messages_msg_type_var, String GeneralMsg_messages_msg_txt_var, double GeneralMsg_messages_value_var){
final Event _msg = messagesType.instantiate(GeneralMsg_messages_section_id_var, GeneralMsg_messages_msg_type_var, GeneralMsg_messages_msg_txt_var, GeneralMsg_messages_value_var);
_msg.setPort(from_pim_port);
receive(_msg);
}

public synchronized void messages_via_MQTT(int GeneralMsg_messages_section_id_var, String GeneralMsg_messages_msg_type_var, String GeneralMsg_messages_msg_txt_var, double GeneralMsg_messages_value_var){
final Event _msg = messagesType.instantiate(GeneralMsg_messages_section_id_var, GeneralMsg_messages_msg_type_var, GeneralMsg_messages_msg_txt_var, GeneralMsg_messages_value_var);
_msg.setPort(MQTT_port);
receive(_msg);
}

private void sendMessages_via_to_pim(int GeneralMsg_messages_section_id_var, String GeneralMsg_messages_msg_type_var, String GeneralMsg_messages_msg_txt_var, double GeneralMsg_messages_value_var){
to_pim_port.send(messagesType.instantiate(GeneralMsg_messages_section_id_var, GeneralMsg_messages_msg_type_var, GeneralMsg_messages_msg_txt_var, GeneralMsg_messages_value_var));
}

private void sendMessages_via_MQTT(int GeneralMsg_messages_section_id_var, String GeneralMsg_messages_msg_type_var, String GeneralMsg_messages_msg_txt_var, double GeneralMsg_messages_value_var){
MQTT_port.send(messagesType.instantiate(GeneralMsg_messages_section_id_var, GeneralMsg_messages_msg_type_var, GeneralMsg_messages_msg_txt_var, GeneralMsg_messages_value_var));
}

//Attributes
//Ports
private Port to_pim_port;
private Port from_pim_port;
private Port MQTT_port;
//Message types
protected final PromptMessageType promptType = new PromptMessageType();
protected final MessagesMessageType messagesType = new MessagesMessageType();
protected final ReplyMessageType replyType = new ReplyMessageType();
//Empty Constructor
public MQTTDriver() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getTo_pim_port() {
return to_pim_port;
}
public Port getFrom_pim_port() {
return from_pim_port;
}
public Port getMQTT_port() {
return MQTT_port;
}
private CompositeState buildMQTTDriver_behaviorMQTTDriver(){
final AtomicState state_MQTTDriver_behaviorMQTTDriver_Idle = new AtomicState("Idle");
Transition h1244263056 = new Transition();
h1244263056.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1244263056.event(messagesType);
h1244263056.port(MQTT_port);
h1244263056.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
sendMessages_via_to_pim((int) (messages.section_id), (String) (messages.msg_type), (String) (messages.msg_txt), (double) (messages.value));
});

Transition h1220813917 = new Transition();
h1220813917.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1220813917.event(messagesType);
h1220813917.port(from_pim_port);
h1220813917.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
sendMessages_via_MQTT((int) (messages.section_id), (String) (messages.msg_type), (String) (messages.msg_txt), (double) (messages.value));
});

final CompositeState state_MQTTDriver_behaviorMQTTDriver = new CompositeState("behaviorMQTTDriver");
state_MQTTDriver_behaviorMQTTDriver.onEntry(()->{
});
state_MQTTDriver_behaviorMQTTDriver.add(state_MQTTDriver_behaviorMQTTDriver_Idle);
state_MQTTDriver_behaviorMQTTDriver.initial(state_MQTTDriver_behaviorMQTTDriver_Idle);
return state_MQTTDriver_behaviorMQTTDriver;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
to_pim_port = new Port("to_pim", this);
from_pim_port = new Port("from_pim", this);
MQTT_port = new Port("MQTT", this);
} else {
to_pim_port = ((MQTTDriver)root).to_pim_port;
from_pim_port = ((MQTTDriver)root).from_pim_port;
MQTT_port = ((MQTTDriver)root).MQTT_port;
}
if (session == null){
//Init state machine
behavior = buildMQTTDriver_behaviorMQTTDriver();
}
return this;
}

}
