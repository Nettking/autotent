/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : MQTTDriver
 **/
public class MQTTDriver extends Component implements IMQTTDriver_from_pim, IMQTTDriver_MQTT {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void Plant_State_via_from_pim(String PlantStateMsg_Plant_State_txt_var){
final Event _msg = Plant_StateType.instantiate(PlantStateMsg_Plant_State_txt_var);
_msg.setPort(from_pim_port);
receive(_msg);
}

public synchronized void Plant_State_via_MQTT(String PlantStateMsg_Plant_State_txt_var){
final Event _msg = Plant_StateType.instantiate(PlantStateMsg_Plant_State_txt_var);
_msg.setPort(MQTT_port);
receive(_msg);
}

private void sendDark_green_pixel_count_via_to_pim(int PixelMsg_dark_green_pixel_count_id_var, String PixelMsg_dark_green_pixel_count_txt_var, double PixelMsg_dark_green_pixel_count_c_var){
to_pim_port.send(dark_green_pixel_countType.instantiate(PixelMsg_dark_green_pixel_count_id_var, PixelMsg_dark_green_pixel_count_txt_var, PixelMsg_dark_green_pixel_count_c_var));
}

private void sendGreen_pixel_count_via_to_pim(int PixelMsg_green_pixel_count_id_var, String PixelMsg_green_pixel_count_txt_var, double PixelMsg_green_pixel_count_c_var){
to_pim_port.send(green_pixel_countType.instantiate(PixelMsg_green_pixel_count_id_var, PixelMsg_green_pixel_count_txt_var, PixelMsg_green_pixel_count_c_var));
}

private void sendLight_green_pixel_count_via_to_pim(int PixelMsg_light_green_pixel_count_id_var, String PixelMsg_light_green_pixel_count_txt_var, double PixelMsg_light_green_pixel_count_c_var){
to_pim_port.send(light_green_pixel_countType.instantiate(PixelMsg_light_green_pixel_count_id_var, PixelMsg_light_green_pixel_count_txt_var, PixelMsg_light_green_pixel_count_c_var));
}

private void sendSide_camera_height_via_to_pim(int PixelMsg_side_camera_height_id_var, String PixelMsg_side_camera_height_txt_var, double PixelMsg_side_camera_height_h_var){
to_pim_port.send(side_camera_heightType.instantiate(PixelMsg_side_camera_height_id_var, PixelMsg_side_camera_height_txt_var, PixelMsg_side_camera_height_h_var));
}

private void sendDark_green_pixel_count_via_MQTT(int PixelMsg_dark_green_pixel_count_id_var, String PixelMsg_dark_green_pixel_count_txt_var, double PixelMsg_dark_green_pixel_count_c_var){
MQTT_port.send(dark_green_pixel_countType.instantiate(PixelMsg_dark_green_pixel_count_id_var, PixelMsg_dark_green_pixel_count_txt_var, PixelMsg_dark_green_pixel_count_c_var));
}

private void sendGreen_pixel_count_via_MQTT(int PixelMsg_green_pixel_count_id_var, String PixelMsg_green_pixel_count_txt_var, double PixelMsg_green_pixel_count_c_var){
MQTT_port.send(green_pixel_countType.instantiate(PixelMsg_green_pixel_count_id_var, PixelMsg_green_pixel_count_txt_var, PixelMsg_green_pixel_count_c_var));
}

private void sendLight_green_pixel_count_via_MQTT(int PixelMsg_light_green_pixel_count_id_var, String PixelMsg_light_green_pixel_count_txt_var, double PixelMsg_light_green_pixel_count_c_var){
MQTT_port.send(light_green_pixel_countType.instantiate(PixelMsg_light_green_pixel_count_id_var, PixelMsg_light_green_pixel_count_txt_var, PixelMsg_light_green_pixel_count_c_var));
}

private void sendSide_camera_height_via_MQTT(int PixelMsg_side_camera_height_id_var, String PixelMsg_side_camera_height_txt_var, double PixelMsg_side_camera_height_h_var){
MQTT_port.send(side_camera_heightType.instantiate(PixelMsg_side_camera_height_id_var, PixelMsg_side_camera_height_txt_var, PixelMsg_side_camera_height_h_var));
}

//Attributes
//Ports
private Port to_pim_port;
private Port from_pim_port;
private Port MQTT_port;
//Message types
protected final PromptMessageType promptType = new PromptMessageType();
protected final Light_green_pixel_countMessageType light_green_pixel_countType = new Light_green_pixel_countMessageType();
protected final Green_pixel_countMessageType green_pixel_countType = new Green_pixel_countMessageType();
protected final Dark_green_pixel_countMessageType dark_green_pixel_countType = new Dark_green_pixel_countMessageType();
protected final Side_camera_heightMessageType side_camera_heightType = new Side_camera_heightMessageType();
protected final Plant_StateMessageType Plant_StateType = new Plant_StateMessageType();
//Empty Constructor
public MQTTDriver() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getTo_pim_port() {
return to_pim_port;
}
public Port getFrom_pim_port() {
return from_pim_port;
}
public Port getMQTT_port() {
return MQTT_port;
}
private CompositeState buildMQTTDriver_behaviorMQTTDriver(){
final AtomicState state_MQTTDriver_behaviorMQTTDriver_Idle = new AtomicState("Idle");
Transition h1113414982 = new Transition();
h1113414982.from(state_MQTTDriver_behaviorMQTTDriver_Idle).to(state_MQTTDriver_behaviorMQTTDriver_Idle);
h1113414982.event(Plant_StateType);
h1113414982.port(MQTT_port);
h1113414982.action((Event e)->{
final Plant_StateMessageType.Plant_StateMessage Plant_State = (Plant_StateMessageType.Plant_StateMessage) e;
sendSide_camera_height_via_to_pim((int) (1), (String) ("string"), (double) (0));
sendDark_green_pixel_count_via_to_pim((int) (1), (String) ("string"), (double) (0));
sendGreen_pixel_count_via_to_pim((int) (1), (String) ("string"), (double) (0));
sendLight_green_pixel_count_via_to_pim((int) (1), (String) ("string"), (double) (0));
});

final CompositeState state_MQTTDriver_behaviorMQTTDriver = new CompositeState("behaviorMQTTDriver");
state_MQTTDriver_behaviorMQTTDriver.onEntry(()->{
});
state_MQTTDriver_behaviorMQTTDriver.add(state_MQTTDriver_behaviorMQTTDriver_Idle);
state_MQTTDriver_behaviorMQTTDriver.initial(state_MQTTDriver_behaviorMQTTDriver_Idle);
return state_MQTTDriver_behaviorMQTTDriver;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
to_pim_port = new Port("to_pim", this);
from_pim_port = new Port("from_pim", this);
MQTT_port = new Port("MQTT", this);
} else {
to_pim_port = ((MQTTDriver)root).to_pim_port;
from_pim_port = ((MQTTDriver)root).from_pim_port;
MQTT_port = ((MQTTDriver)root).MQTT_port;
}
if (session == null){
//Init state machine
behavior = buildMQTTDriver_behaviorMQTTDriver();
}
return this;
}

}
