/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : PIM
 **/
public class PIM extends Component implements IPIM_from_psm, IPIM_timer {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "\tnumber_of_sections = " + PIM_number_of_sections_var;
result += "\tcurrent_plant_state = " + PIM_current_plant_state_var;
result += "\tcurrent_side_camera_height = " + PIM_current_side_camera_height_var;
result += "\tcurrent_light_green_pixel_count = " + PIM_current_light_green_pixel_count_var;
result += "\tcurrent_green_pixel_count = " + PIM_current_green_pixel_count_var;
result += "\tcurrent_dark_green_pixel_count = " + PIM_current_dark_green_pixel_count_var;
result += "\tcurrent_red_pixel_count = " + PIM_current_red_pixel_count_var;
result += "\tcurrent_white_pixel_count = " + PIM_current_white_pixel_count_var;
result += "\tcurrent_yellow_pixel_count = " + PIM_current_yellow_pixel_count_var;
result += "\tsection_id = " + PIM_section_id_var;
result += "\tfruit_threshhold = " + PIM_fruit_threshhold_var;
result += "";
return result;
}

public synchronized void timer_timeout_via_timer(int TimerMsgs_timer_timeout_id_var){
final Event _msg = timer_timeoutType.instantiate(TimerMsgs_timer_timeout_id_var);
_msg.setPort(timer_port);
receive(_msg);
}

public synchronized void messages_via_from_psm(int GeneralMsg_messages_section_id_var, String GeneralMsg_messages_msg_type_var, String GeneralMsg_messages_msg_txt_var, double GeneralMsg_messages_value_var){
final Event _msg = messagesType.instantiate(GeneralMsg_messages_section_id_var, GeneralMsg_messages_msg_type_var, GeneralMsg_messages_msg_txt_var, GeneralMsg_messages_value_var);
_msg.setPort(from_psm_port);
receive(_msg);
}

private void sendTimer_start_via_timer(int TimerMsgs_timer_start_delay_var){
timer_port.send(timer_startType.instantiate(TimerMsgs_timer_start_delay_var));
}

private void sendTimer_cancel_via_timer(){
timer_port.send(timer_cancelType.instantiate());
}

private void sendReply_via_to_psm(int GeneralMsg_reply_id_var, String GeneralMsg_reply_content_var){
to_psm_port.send(replyType.instantiate(GeneralMsg_reply_id_var, GeneralMsg_reply_content_var));
}

//Attributes
private double PIM_current_yellow_pixel_count_var;
private double PIM_fruit_threshhold_var;
private String PIM_current_plant_state_var;
private double PIM_current_green_pixel_count_var;
private double PIM_current_white_pixel_count_var;
private int PIM_section_id_var;
private double PIM_current_side_camera_height_var;
private double PIM_current_dark_green_pixel_count_var;
private double PIM_current_red_pixel_count_var;
private int PIM_number_of_sections_var;
private double PIM_current_light_green_pixel_count_var;
//Ports
private Port timer_port;
private Port to_psm_port;
private Port from_psm_port;
//Message types
protected final PromptMessageType promptType = new PromptMessageType();
protected final MessagesMessageType messagesType = new MessagesMessageType();
protected final ReplyMessageType replyType = new ReplyMessageType();
protected final Timer_startMessageType timer_startType = new Timer_startMessageType();
protected final Timer_cancelMessageType timer_cancelType = new Timer_cancelMessageType();
protected final Timer_timeoutMessageType timer_timeoutType = new Timer_timeoutMessageType();
//Empty Constructor
public PIM() {
super();
}

//Getters and Setters for non readonly/final attributes
public double getPIM_current_yellow_pixel_count_var() {
return PIM_current_yellow_pixel_count_var;
}

public void setPIM_current_yellow_pixel_count_var(double PIM_current_yellow_pixel_count_var) {
this.PIM_current_yellow_pixel_count_var = PIM_current_yellow_pixel_count_var;
}

public PIM initPIM_current_yellow_pixel_count_var(double PIM_current_yellow_pixel_count_var) {
this.PIM_current_yellow_pixel_count_var = PIM_current_yellow_pixel_count_var;
return this;
}

public double getPIM_fruit_threshhold_var() {
return PIM_fruit_threshhold_var;
}

public void setPIM_fruit_threshhold_var(double PIM_fruit_threshhold_var) {
this.PIM_fruit_threshhold_var = PIM_fruit_threshhold_var;
}

public PIM initPIM_fruit_threshhold_var(double PIM_fruit_threshhold_var) {
this.PIM_fruit_threshhold_var = PIM_fruit_threshhold_var;
return this;
}

public String getPIM_current_plant_state_var() {
return PIM_current_plant_state_var;
}

public void setPIM_current_plant_state_var(String PIM_current_plant_state_var) {
this.PIM_current_plant_state_var = PIM_current_plant_state_var;
}

public PIM initPIM_current_plant_state_var(String PIM_current_plant_state_var) {
this.PIM_current_plant_state_var = PIM_current_plant_state_var;
return this;
}

public double getPIM_current_green_pixel_count_var() {
return PIM_current_green_pixel_count_var;
}

public void setPIM_current_green_pixel_count_var(double PIM_current_green_pixel_count_var) {
this.PIM_current_green_pixel_count_var = PIM_current_green_pixel_count_var;
}

public PIM initPIM_current_green_pixel_count_var(double PIM_current_green_pixel_count_var) {
this.PIM_current_green_pixel_count_var = PIM_current_green_pixel_count_var;
return this;
}

public double getPIM_current_white_pixel_count_var() {
return PIM_current_white_pixel_count_var;
}

public void setPIM_current_white_pixel_count_var(double PIM_current_white_pixel_count_var) {
this.PIM_current_white_pixel_count_var = PIM_current_white_pixel_count_var;
}

public PIM initPIM_current_white_pixel_count_var(double PIM_current_white_pixel_count_var) {
this.PIM_current_white_pixel_count_var = PIM_current_white_pixel_count_var;
return this;
}

public int getPIM_section_id_var() {
return PIM_section_id_var;
}

public void setPIM_section_id_var(int PIM_section_id_var) {
this.PIM_section_id_var = PIM_section_id_var;
}

public PIM initPIM_section_id_var(int PIM_section_id_var) {
this.PIM_section_id_var = PIM_section_id_var;
return this;
}

public double getPIM_current_side_camera_height_var() {
return PIM_current_side_camera_height_var;
}

public void setPIM_current_side_camera_height_var(double PIM_current_side_camera_height_var) {
this.PIM_current_side_camera_height_var = PIM_current_side_camera_height_var;
}

public PIM initPIM_current_side_camera_height_var(double PIM_current_side_camera_height_var) {
this.PIM_current_side_camera_height_var = PIM_current_side_camera_height_var;
return this;
}

public double getPIM_current_dark_green_pixel_count_var() {
return PIM_current_dark_green_pixel_count_var;
}

public void setPIM_current_dark_green_pixel_count_var(double PIM_current_dark_green_pixel_count_var) {
this.PIM_current_dark_green_pixel_count_var = PIM_current_dark_green_pixel_count_var;
}

public PIM initPIM_current_dark_green_pixel_count_var(double PIM_current_dark_green_pixel_count_var) {
this.PIM_current_dark_green_pixel_count_var = PIM_current_dark_green_pixel_count_var;
return this;
}

public double getPIM_current_red_pixel_count_var() {
return PIM_current_red_pixel_count_var;
}

public void setPIM_current_red_pixel_count_var(double PIM_current_red_pixel_count_var) {
this.PIM_current_red_pixel_count_var = PIM_current_red_pixel_count_var;
}

public PIM initPIM_current_red_pixel_count_var(double PIM_current_red_pixel_count_var) {
this.PIM_current_red_pixel_count_var = PIM_current_red_pixel_count_var;
return this;
}

public int getPIM_number_of_sections_var() {
return PIM_number_of_sections_var;
}

public void setPIM_number_of_sections_var(int PIM_number_of_sections_var) {
this.PIM_number_of_sections_var = PIM_number_of_sections_var;
}

public PIM initPIM_number_of_sections_var(int PIM_number_of_sections_var) {
this.PIM_number_of_sections_var = PIM_number_of_sections_var;
return this;
}

public double getPIM_current_light_green_pixel_count_var() {
return PIM_current_light_green_pixel_count_var;
}

public void setPIM_current_light_green_pixel_count_var(double PIM_current_light_green_pixel_count_var) {
this.PIM_current_light_green_pixel_count_var = PIM_current_light_green_pixel_count_var;
}

public PIM initPIM_current_light_green_pixel_count_var(double PIM_current_light_green_pixel_count_var) {
this.PIM_current_light_green_pixel_count_var = PIM_current_light_green_pixel_count_var;
return this;
}

//Getters for Ports
public Port getTimer_port() {
return timer_port;
}
public Port getTo_psm_port() {
return to_psm_port;
}
public Port getFrom_psm_port() {
return from_psm_port;
}
private CompositeState buildPIM_Plant_State(){
final AtomicState state_PIM_Plant_State_InitSections = new AtomicState("InitSections");
state_PIM_Plant_State_InitSections.onEntry(()->{
PIM_section_id_var = (int) (getPIM_section_id_var() + 1);
System.out.println(""+(("Initializing Section with ID: " + getPIM_section_id_var())));
final Component Section = new PIM().initPIM_current_yellow_pixel_count_var(PIM.this.PIM_current_yellow_pixel_count_var).initPIM_fruit_threshhold_var(PIM.this.PIM_fruit_threshhold_var).initPIM_current_plant_state_var(PIM.this.PIM_current_plant_state_var).initPIM_current_green_pixel_count_var(PIM.this.PIM_current_green_pixel_count_var).initPIM_current_white_pixel_count_var(PIM.this.PIM_current_white_pixel_count_var).initPIM_section_id_var(PIM.this.PIM_section_id_var).initPIM_current_side_camera_height_var(PIM.this.PIM_current_side_camera_height_var).initPIM_current_dark_green_pixel_count_var(PIM.this.PIM_current_dark_green_pixel_count_var).initPIM_current_red_pixel_count_var(PIM.this.PIM_current_red_pixel_count_var).initPIM_number_of_sections_var(PIM.this.PIM_number_of_sections_var).initPIM_current_light_green_pixel_count_var(PIM.this.PIM_current_light_green_pixel_count_var).buildBehavior("Section", PIM.this);
final Component root = (PIM.this.root == null)? PIM.this : PIM.this.root;
root.addSession(Section);
});
final FinalState state_PIM_Plant_State_InitCompleted = new FinalState("InitCompleted");
state_PIM_Plant_State_InitCompleted.onEntry(()->{
stop();
delete();
});
Transition h1235908203 = new Transition();
h1235908203.from(state_PIM_Plant_State_InitSections).to(state_PIM_Plant_State_InitSections);
h1235908203.guard((Event e)->{
return getPIM_section_id_var() < getPIM_number_of_sections_var();
});

Transition h1445758842 = new Transition();
h1445758842.from(state_PIM_Plant_State_InitSections).to(state_PIM_Plant_State_InitCompleted);
h1445758842.guard((Event e)->{
return getPIM_section_id_var() == getPIM_number_of_sections_var();
});

final CompositeState state_PIM_Plant_State = new CompositeState("Plant_State");
state_PIM_Plant_State.onEntry(()->{
});
state_PIM_Plant_State.add(state_PIM_Plant_State_InitSections);
state_PIM_Plant_State.add(state_PIM_Plant_State_InitCompleted);
state_PIM_Plant_State.initial(state_PIM_Plant_State_InitSections);
return state_PIM_Plant_State;
}

private CompositeState buildPIM_Plant_State_Section(){
final CompositeState state_PIM_Plant_State_Section_Running = buildPIM_Plant_State_Section_Running();
final CompositeState state_PIM_Plant_State_Section = new CompositeState("Section");
state_PIM_Plant_State_Section.add(state_PIM_Plant_State_Section_Running);
state_PIM_Plant_State_Section.initial(state_PIM_Plant_State_Section_Running);
return state_PIM_Plant_State_Section;
}

private CompositeState buildPIM_Plant_State_Section_Running(){
final AtomicState state_PIM_Plant_State_Section_Running_Germination = new AtomicState("Germination");
state_PIM_Plant_State_Section_Running_Germination.onEntry(()->{
sendTimer_start_via_timer((int) (10 * 24 * 60 * 60 * 1000));
});
state_PIM_Plant_State_Section_Running_Germination.onExit(()->{
sendTimer_cancel_via_timer();
});

final AtomicState state_PIM_Plant_State_Section_Running_Seedling = new AtomicState("Seedling");
state_PIM_Plant_State_Section_Running_Seedling.onEntry(()->{
sendTimer_start_via_timer((int) (14 * 24 * 60 * 60 * 1000));
});
state_PIM_Plant_State_Section_Running_Seedling.onExit(()->{
sendTimer_cancel_via_timer();
});

final AtomicState state_PIM_Plant_State_Section_Running_Growing = new AtomicState("Growing");
final AtomicState state_PIM_Plant_State_Section_Running_Fruting = new AtomicState("Fruting");
final AtomicState state_PIM_Plant_State_Section_Running_Dying_During_Germination_or_Seedling = new AtomicState("Dying_During_Germination_or_Seedling");
final AtomicState state_PIM_Plant_State_Section_Running_Dying_During_Growing_or_Fruiting = new AtomicState("Dying_During_Growing_or_Fruiting");
Transition h584157293 = new Transition();
h584157293.from(state_PIM_Plant_State_Section_Running_Germination).to(state_PIM_Plant_State_Section_Running_Dying_During_Germination_or_Seedling);
h584157293.event(timer_timeoutType);
h584157293.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == getPIM_section_id_var();
});

h584157293.port(timer_port);
h584157293.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
PIM_current_plant_state_var = (String) ("Dying_During_Germination");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h893320639 = new Transition();
h893320639.from(state_PIM_Plant_State_Section_Running_Germination).to(state_PIM_Plant_State_Section_Running_Seedling);
h893320639.event(messagesType);
h893320639.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.msg_type.equals("side_camera_height") || messages.msg_type.equals("light_green_pixel_count") || messages.msg_type.equals("green_pixel_count") || messages.msg_type.equals("dark_green_pixel_count") && messages.section_id == getPIM_section_id_var() && messages.value > 0;
});

h893320639.port(from_psm_port);
h893320639.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
if(messages.msg_type.equals("side_camera_height")) {
PIM_current_side_camera_height_var = (double) (messages.value);

}
if(messages.msg_type.equals("light_green_pixel_count")) {
PIM_current_light_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("green_pixel_count")) {
PIM_current_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("dark_green_pixel_count")) {
PIM_current_dark_green_pixel_count_var = (double) (messages.value);

}
PIM_current_plant_state_var = (String) ("Seedling");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h70386506 = new Transition();
h70386506.from(state_PIM_Plant_State_Section_Running_Seedling).to(state_PIM_Plant_State_Section_Running_Dying_During_Germination_or_Seedling);
h70386506.event(timer_timeoutType);
h70386506.guard((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
return timer_timeout.id == getPIM_section_id_var();
});

h70386506.port(timer_port);
h70386506.action((Event e)->{
final Timer_timeoutMessageType.Timer_timeoutMessage timer_timeout = (Timer_timeoutMessageType.Timer_timeoutMessage) e;
PIM_current_plant_state_var = (String) ("Dying_During_Germination");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h559559860 = new Transition();
h559559860.from(state_PIM_Plant_State_Section_Running_Seedling).to(state_PIM_Plant_State_Section_Running_Growing);
h559559860.event(messagesType);
h559559860.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.msg_type.equals("light_green_pixel_count") || messages.msg_type.equals("green_pixel_count") || messages.msg_type.equals("dark_green_pixel_count") && messages.section_id == getPIM_section_id_var() && messages.value > 0;
});

h559559860.port(from_psm_port);
h559559860.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
if(messages.msg_type.equals("light_green_pixel_count")) {
PIM_current_light_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("green_pixel_count")) {
PIM_current_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("dark_green_pixel_count")) {
PIM_current_dark_green_pixel_count_var = (double) (messages.value);

}
PIM_current_plant_state_var = (String) ("Growing");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h700837405 = new Transition();
h700837405.from(state_PIM_Plant_State_Section_Running_Growing).to(state_PIM_Plant_State_Section_Running_Dying_During_Growing_or_Fruiting);
h700837405.event(messagesType);
h700837405.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.msg_type.equals("green_pixel_count") && messages.section_id == getPIM_section_id_var() && messages.value < getPIM_current_light_green_pixel_count_var();
});

h700837405.port(from_psm_port);
h700837405.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
PIM_current_light_green_pixel_count_var = (double) (messages.value);
PIM_current_plant_state_var = (String) ("Dying_During_Growing");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h773066329 = new Transition();
h773066329.from(state_PIM_Plant_State_Section_Running_Growing).to(state_PIM_Plant_State_Section_Running_Fruting);
h773066329.event(messagesType);
h773066329.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.section_id == getPIM_section_id_var() && messages.msg_type.equals("red_pixel_count") || messages.msg_type.equals("yellow_pixel_count") || messages.msg_type.equals("white_pixel_count") && messages.value > getPIM_fruit_threshhold_var() && getPIM_current_dark_green_pixel_count_var() > getPIM_current_green_pixel_count_var();
});

h773066329.port(from_psm_port);
h773066329.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
if(messages.msg_type.equals("red_pixel_count")) {
PIM_current_red_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("yellow_pixel_count")) {
PIM_current_yellow_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("white_pixel_count")) {
PIM_current_white_pixel_count_var = (double) (messages.value);

}
PIM_current_plant_state_var = (String) ("Fruiting");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h1516536489 = new Transition();
h1516536489.from(state_PIM_Plant_State_Section_Running_Fruting).to(state_PIM_Plant_State_Section_Running_Dying_During_Growing_or_Fruiting);
h1516536489.event(messagesType);
h1516536489.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.section_id == getPIM_section_id_var() && messages.msg_type.equals("red_pixel_count") && messages.value < getPIM_current_red_pixel_count_var();
});

h1516536489.port(from_psm_port);
h1516536489.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
PIM_current_red_pixel_count_var = (double) (messages.value);
PIM_current_plant_state_var = (String) ("Dying_During_Fruting");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h1027006452 = new Transition();
h1027006452.from(state_PIM_Plant_State_Section_Running_Dying_During_Germination_or_Seedling).to(state_PIM_Plant_State_Section_Running_Seedling);
h1027006452.event(messagesType);
h1027006452.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.msg_type.equals("side_camera_height") || messages.msg_type.equals("light_green_pixel_count") || messages.msg_type.equals("green_pixel_count") || messages.msg_type.equals("dark_green_pixel_count") && messages.section_id == getPIM_section_id_var() && messages.value > 0;
});

h1027006452.port(from_psm_port);
h1027006452.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
if(messages.msg_type.equals("side_camera_height")) {
PIM_current_side_camera_height_var = (double) (messages.value);

}
if(messages.msg_type.equals("light_green_pixel_count")) {
PIM_current_light_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("green_pixel_count")) {
PIM_current_green_pixel_count_var = (double) (messages.value);

}
if(messages.msg_type.equals("dark_green_pixel_count")) {
PIM_current_dark_green_pixel_count_var = (double) (messages.value);

}
PIM_current_plant_state_var = (String) ("Seedling");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

Transition h382252989 = new Transition();
h382252989.from(state_PIM_Plant_State_Section_Running_Dying_During_Growing_or_Fruiting).to(state_PIM_Plant_State_Section_Running_Growing);
h382252989.event(messagesType);
h382252989.guard((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
return messages.section_id == getPIM_section_id_var() && messages.msg_type.equals("green_pixel_count") && messages.value < getPIM_current_green_pixel_count_var();
});

h382252989.port(from_psm_port);
h382252989.action((Event e)->{
final MessagesMessageType.MessagesMessage messages = (MessagesMessageType.MessagesMessage) e;
PIM_current_green_pixel_count_var = (double) (messages.value);
PIM_current_plant_state_var = (String) ("Growing");
sendReply_via_to_psm((int) (getPIM_section_id_var() - 1), (String) (getPIM_current_plant_state_var()));
});

final CompositeState state_PIM_Plant_State_Section_Running = new CompositeState("Running");
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Germination);
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Seedling);
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Growing);
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Fruting);
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Dying_During_Germination_or_Seedling);
state_PIM_Plant_State_Section_Running.add(state_PIM_Plant_State_Section_Running_Dying_During_Growing_or_Fruiting);
state_PIM_Plant_State_Section_Running.keepHistory(true);
state_PIM_Plant_State_Section_Running.initial(state_PIM_Plant_State_Section_Running_Germination);
return state_PIM_Plant_State_Section_Running;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
timer_port = new Port("timer", this);
to_psm_port = new Port("to_psm", this);
from_psm_port = new Port("from_psm", this);
} else {
timer_port = ((PIM)root).timer_port;
to_psm_port = ((PIM)root).to_psm_port;
from_psm_port = ((PIM)root).from_psm_port;
}
if (session == null){
//Init state machine
behavior = buildPIM_Plant_State();
}
else if ("Section".equals(session)) {
behavior = buildPIM_Plant_State_Section();
}
return this;
}

}
